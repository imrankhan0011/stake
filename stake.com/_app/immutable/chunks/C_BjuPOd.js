import{H as j}from"./QdAl6vsM.js";function $({original:s,fallback:t}){const r=s.map(({slug:n})=>n==null?void 0:n.current),i=t.filter(({slug:n})=>!r.includes(n==null?void 0:n.current));return[...s,...i]}const I=({query:s,params:t={},options:r={}})=>{const i=new URLSearchParams,{tag:n,...e}=r;n&&i.set("tag",n),i.set("query",s);for(const[a,o]of Object.entries(t))i.set(`$${a}`,JSON.stringify(o));for(const[a,o]of Object.entries(e))o&&i.set(a,`${o}`);return`?${i.toString()}`},S=({dataset:s,projectId:t,apiVersion:r,query:i=""})=>`https://${t}.apicdn.sanity.io/${r}/data/query/${s}${i}`,q=s=>{var i;let t={listTag:null,listBlocks:[]};const r=[];if(s!=null&&s.length)for(let n=0;n<s.length;n++){const e=s[n];((e==null?void 0:e.listItem)===void 0||(e==null?void 0:e.listItem)!==((i=s[n-1])==null?void 0:i.listItem))&&(t.listBlocks.length&&r.push(t),t={listTag:null,listBlocks:[]}),(e==null?void 0:e.listItem)===void 0?r.push(e):(e==null?void 0:e.listItem)==="bullet"?(t.listTag="ul",t.listBlocks=[...t.listBlocks,e]):(e==null?void 0:e.listItem)==="number"&&(t.listTag="ol",t.listBlocks=[...t.listBlocks,e]),n+1===s.length&&t.listBlocks.length&&r.push(t)}return r};class B{constructor(t){this.dataset=t.dataset,this.projectId=t.projectId,this.apiVersion=t.apiVersion,this.defaultLanguage=t.defaultLanguage,this.cacheMap=new Map}createQuery(t){const r=Array(t).join("");return async(i,n)=>{var p;const e=((p=i==null?void 0:i.params)==null?void 0:p.lang)??this.defaultLanguage;let a=null;const o=new AbortController,m=o.signal,w=I({query:r,params:{lang:e,defaultLanguage:this.defaultLanguage,...n}}),l=S({dataset:this.dataset,projectId:this.projectId,apiVersion:this.apiVersion,query:w});try{const u=typeof window<"u";u||(a=setTimeout(()=>{o.abort()},5e3));const d=Date.now();if(u&&this.cacheMap.has(l)){const h=this.cacheMap.get(l);if(h&&h.invalidateAt>d)return h.result}const c=await i.fetch(l,{method:"GET",headers:{"Access-Control-Allow-Origin":"*","Content-Type":"application/json","x-sanity-operation":"sanity"},signal:m}),f=await c.json();if("error"in f)throw console.error("sanity: error",f),Error("sanity: error found in json");if(c.status!==200)throw console.error("sanity: response status is ",c.status),Error("sanity: response status is "+c.status);if(!("result"in f))throw console.error("sanity: response is empty",c.status),Error("sanity: no result json in");const g=f.result;return u&&this.cacheMap.set(l,{result:g,invalidateAt:d+j}),g}catch(u){return console.error(JSON.stringify({errorType:"sanity fetch error",error:u,url:l})),null}finally{a&&clearTimeout(a)}}}}let y=null;function C(s){return new B(s)}function v(s){y&&console.warn("Default Sanity client already initialized"),y=C(s)}function L(){if(!y)throw new Error("Sanity client not initialized. Call initializeSanityClient() first.");return y}function E(s){return(t,r)=>L().createQuery(s)(t,r)}export{$ as a,E as c,q as g,v as i};
